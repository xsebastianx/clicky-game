{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","characters","clickedCharacterIds","score","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"u0WAUeA,G,MAPF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,4BACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAChDC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oBCDpDQ,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCO1CC,G,MAPD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,cAAkCD,EAAMY,OACxC,wBAAIX,UAAU,UAAUD,EAAMa,W,OCoEnBC,G,iNAjEbC,MAAQ,CACNC,aACAC,oBAAqB,GACrBC,MAAO,EACPC,KAAM,GACNN,OAAQ,I,EAGVL,iBAAmB,SAAAF,GACjB,IAAIW,EAAsB,EAAKF,MAAME,oBAErC,GAAGA,EAAoBG,SAASd,GAC9B,EAAKe,SAAS,CAACJ,oBAAqB,GAAIC,MAAO,EAAGL,OAAQ,8BAD5D,CAME,GAFAI,EAAoBK,KAAKhB,GAES,KAA/BW,EAAoBM,OAGrB,OAFA,EAAKF,SAAS,CAACH,MAAO,GAAIL,OAAQ,gCAAiCI,oBAAqB,UACxFO,QAAQC,IAAI,UAId,EAAKJ,SAAS,CAAEL,aAAYC,sBAAqBC,MAAOD,EAAoBM,OAAQV,OAAO,MAE3F,IAAK,IAAIa,EAAIV,EAAWO,OAAS,EAAGG,EAAI,EAAGA,IAAK,CAC9C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADM,EAEb,CAACV,EAAWW,GAAIX,EAAWU,IAA3DV,EAAWU,GAFkC,KAE9BV,EAAWW,GAFmB,Q,wEAQ5C,IAAD,OACP,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,6BACA,uBAAGA,UAAU,aAAb,gFAIF,kBAAC,EAAD,CAAOW,MAAOmB,KAAKhB,MAAMG,MAClBC,KAAM,GACNN,OAAQkB,KAAKhB,MAAMF,SAE1B,kBAAC,EAAD,KACGkB,KAAKhB,MAAMC,WAAWgB,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACEzB,iBAAkB,EAAKA,iBACvBF,GAAI2B,EAAU3B,GACd4B,IAAKD,EAAU3B,GACfD,MAAO4B,EAAU5B,YAIvB,sC,GA1DY8B,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.155056e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div className=\"card img-container hover\">\n      <img alt={props.name} src={props.image} id={props.id}\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\n  </div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Score.css\";\n\nconst Score = props => (\n  <div className=\"gameScore\">\n    <h3 className=\"score\">Your Score {props.total}</h3>\n    <h3 className=\"status\">{props.status}</h3>\n  </div>\n);\n\nexport default Score;","import React, {Component} from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport characters from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    characters,\n    clickedCharacterIds: [],\n    score: 0,\n    goal: 12,\n    status: \"\"\n  };\n\n  shuffleScoreCard = id => {\n    let clickedCharacterIds = this.state.clickedCharacterIds;\n\n    if(clickedCharacterIds.includes(id)){\n      this.setState({clickedCharacterIds: [], score: 0, status: \"Game Over! Try again.\"});\n      return;\n    }else{\n      clickedCharacterIds.push(id)\n\n      if(clickedCharacterIds.length === 12){\n        this.setState({score: 12, status: \"Winner winner chicken dinner!\", clickedCharacterIds: []});\n        console.log(\"Winner\");\n        return;\n      }\n\n      this.setState({ characters, clickedCharacterIds, score: clickedCharacterIds.length, status:\" \"});\n\n      for (let i = characters.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [characters[i], characters[j]] = [characters[j], characters[i]];\n      }\n    }\n  }\n\n\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">One Punch Man Clicky Game</h1>\n        <p className=\"App-intro\">\n          Click different characters to score.  Don't click the same character twice.\n        </p>\n      </header>\n      <Score total={this.state.score}\n             goal={12}\n             status={this.state.status}\n             />\n      <Wrapper>\n        {this.state.characters.map(character => (\n          <Card\n            shuffleScoreCard={this.shuffleScoreCard}\n            id={character.id}\n            key={character.id}\n            image={character.image}\n            />\n        ))}\n      </Wrapper>\n      <footer>\n\n      </footer>\n    </div>\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}